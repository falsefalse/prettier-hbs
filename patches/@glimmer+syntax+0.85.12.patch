diff --git a/node_modules/@glimmer/syntax/dist/dev/index.js b/node_modules/@glimmer/syntax/dist/dev/index.js
index 72b3775..4e090b8 100644
--- a/node_modules/@glimmer/syntax/dist/dev/index.js
+++ b/node_modules/@glimmer/syntax/dist/dev/index.js
@@ -2990,11 +2990,30 @@ class HandlebarsNodeVisitors extends Parser {
     return node;
   }
   BlockStatement(block) {
+    const sourceStr = this.sourceForNode(block)
+
     if (this.tokenizer.state === 'comment') {
-      this.appendToCommentData(this.sourceForNode(block));
+      this.appendToCommentData(sourceStr);
       return;
     }
-    if (this.tokenizer.state !== 'data' && this.tokenizer.state !== 'beforeData') {
+
+    if (this.tokenizer.state === 'attributeValueDoubleQuoted') {
+      const sourceText = b.text({
+        chars: sourceStr.replaceAll('{{', '{_{'),
+        loc: this.source.spanFor(block.loc)
+      });
+
+      this.appendDynamicAttributeValuePart(sourceText)
+      return
+    }
+
+    if (['beforeAttributeName', 'afterAttributeName'].includes(this.tokenizer.state)) {
+      const sourceComment = b.mustacheComment(`__uncomment__${sourceStr}__uncomment__`, this.source.spanFor(block.loc));
+      this.currentStartTag.comments.push(sourceComment)
+      return
+    }
+
+    if (!['data', 'beforeData'].includes(this.tokenizer.state)) {
       throw generateSyntaxError('A block may only be used inside an HTML element or another block.', this.source.spanFor(block.loc));
     }
     const {
@@ -3023,6 +3042,7 @@ class HandlebarsNodeVisitors extends Parser {
       inverseStrip: block.inverseStrip,
       closeStrip: block.closeStrip
     });
+
     const parentProgram = this.currentElement();
     appendChild(parentProgram, node);
   }
@@ -3153,7 +3173,9 @@ class HandlebarsNodeVisitors extends Parser {
     return comment;
   }
   PartialStatement(partial) {
-    throw generateSyntaxError(`Handlebars partials are not supported`, this.source.spanFor(partial.loc));
+    const source = this.sourceForNode(partial)
+    const comment = b.mustacheComment(`__uncomment__${source}__uncomment__`, this.source.spanFor(partial.loc))
+    appendChild(this.currentElement(), comment);
   }
   PartialBlockStatement(partialBlock) {
     throw generateSyntaxError(`Handlebars partial blocks are not supported`, this.source.spanFor(partialBlock.loc));
