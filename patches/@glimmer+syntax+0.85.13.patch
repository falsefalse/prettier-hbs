diff --git a/node_modules/@glimmer/syntax/dist/dev/index.js b/node_modules/@glimmer/syntax/dist/dev/index.js
index 227883d..2b2191f 100644
--- a/node_modules/@glimmer/syntax/dist/dev/index.js
+++ b/node_modules/@glimmer/syntax/dist/dev/index.js
@@ -2969,11 +2969,30 @@ class HandlebarsNodeVisitors extends Parser {
     return node;
   }
   BlockStatement(block) {
+    const sourceStr = this.sourceForNode(block)
+
     if (this.tokenizer.state === 'comment') {
-      this.appendToCommentData(this.sourceForNode(block));
+      this.appendToCommentData(sourceStr)
       return;
     }
-    if (this.tokenizer.state !== 'data' && this.tokenizer.state !== 'beforeData') {
+
+    if (this.tokenizer.state === 'attributeValueDoubleQuoted') {
+      const sourceText = b.text({
+        chars: sourceStr.replaceAll('{{', '{_{'),
+        loc: this.source.spanFor(block.loc)
+      });
+
+      this.appendDynamicAttributeValuePart(sourceText)
+      return
+    }
+
+    if (['beforeAttributeName', 'afterAttributeName'].includes(this.tokenizer.state)) {
+      const sourceComment = b.mustacheComment(`__uncomment__${sourceStr}__uncomment__`, this.source.spanFor(block.loc));
+      this.currentStartTag.comments.push(sourceComment)
+      return
+    }
+
+    if (!['data', 'beforeData'].includes(this.tokenizer.state)) {
       throw generateSyntaxError('A block may only be used inside an HTML element or another block.', this.source.spanFor(block.loc));
     }
     const {
@@ -3132,10 +3151,23 @@ class HandlebarsNodeVisitors extends Parser {
     return comment;
   }
   PartialStatement(partial) {
-    throw generateSyntaxError(`Handlebars partials are not supported`, this.source.spanFor(partial.loc));
+    const source = this.sourceForNode(partial);
+    const comment = b.mustacheComment(`__uncomment__${source}__uncomment__`, this.source.spanFor(partial.loc));
+    appendChild(this.currentElement(), comment);
   }
   PartialBlockStatement(partialBlock) {
-    throw generateSyntaxError(`Handlebars partial blocks are not supported`, this.source.spanFor(partialBlock.loc));
+    // rename .path to .name
+    partialBlock.path = partialBlock.name
+    delete partialBlock.name
+
+    // pretend '> ' is a part of the .path
+    // {{#> folder/partial param=123}} --> parts: ["folder", "partial"]
+    // we want instead --> parts: ["> folder", "partial"]
+    partialBlock.path.parts[0] = '> ' + partialBlock.path.parts[0]
+    partialBlock.path.original = partialBlock.path.parts.join('/')
+
+    // these make PartialBlockStatement the same as BlockStatement
+    this.BlockStatement(partialBlock)
   }
   Decorator(decorator) {
     throw generateSyntaxError(`Handlebars decorators are not supported`, this.source.spanFor(decorator.loc));
@@ -3161,16 +3193,19 @@ class HandlebarsNodeVisitors extends Parser {
       original
     } = path;
     let parts;
+
     if (original.indexOf('/') !== -1) {
       if (original.slice(0, 2) === './') {
         throw generateSyntaxError(`Using "./" is not supported in Glimmer and unnecessary`, this.source.spanFor(path.loc));
       }
+      // ignore the two following errors for now, we don't do anything fancy with paths contexts
       if (original.slice(0, 3) === '../') {
-        throw generateSyntaxError(`Changing context using "../" is not supported in Glimmer`, this.source.spanFor(path.loc));
+        // throw generateSyntaxError(`Changing context using "../" is not supported in Glimmer`, this.source.spanFor(path.loc));
       }
       if (original.indexOf('.') !== -1) {
-        throw generateSyntaxError(`Mixing '.' and '/' in paths is not supported in Glimmer; use only '.' to separate property paths`, this.source.spanFor(path.loc));
+        // throw generateSyntaxError(`Mixing '.' and '/' in paths is not supported in Glimmer; use only '.' to separate property paths`, this.source.spanFor(path.loc));
       }
+
       parts = [path.parts.join('/')];
     } else if (original === '.') {
       throw generateSyntaxError(`'.' is not a supported path in Glimmer; check for a path with a trailing '.'`, this.source.spanFor(path.loc));
